import React, { useState, useEffect } from 'react';
import { Button, Card, Modal, Form, ListGroup } from 'react-bootstrap';
import axios from 'axios';
import Swal from 'sweetalert2'; // Import SweetAlert
import "../css/Navbar.css";

const SyllabusDetails = () => {
  const initialSyllabus = {
    subject: '',
    subTopic: '',
    date: '',
    file: null,
  };

  const [classes, setClasses] = useState([]);
  const [syllabusData, setSyllabusData] = useState({});
  const [currentClass, setCurrentClass] = useState('');
  const [syllabus, setSyllabus] = useState(initialSyllabus);
  const [showModal, setShowModal] = useState(false);
  const [file, setFile] = useState(null);
  const [editId, setEditId] = useState(null);

  // Fetch classes and syllabus data on component mount
  useEffect(() => {
    axios.get('http://localhost:5000/classes').then((res) => {
      setClasses(res.data.map((cls) => cls.class_name));
    });
     const storedUser = localStorage.getItem("userData");
        const teacher = storedUser ? JSON.parse(storedUser) : null;
    
        if (!teacher) {
          Swal.fire("Error", "Teacher not logged in", "error");
          return;
        }
    
        const { id: teacherId, name: teacherName } = teacher;
    
    axios.get('http://localhost:5000/syllabus',{
      params:{teacher_id:teacherId,teacher_name:teacherName}
    }).then((res) => {
      const grouped = res.data.reduce((acc, item) => {
        acc[item.class] = acc[item.class] || [];
        acc[item.class].push(item);
        return acc;
      }, {});
      setSyllabusData(grouped);
    });
  }, []);

  // Handle form input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setSyllabus((prev) => ({ ...prev, [name]: value }));
  };

  // Handle file input change
  const handleFileChange = (e) => {
    setFile(e.target.files[0]);
  };

  // Handle form submission for adding or editing syllabus
  const handleSubmit = () => {
    const userData = JSON.parse(localStorage.getItem('userData'));
    console.log('User Data from localStorage:', userData);

    if (!userData) {
        Swal.fire("Error", "User data not found. Please log in again.", "error");
      return;
    }

    const teacherId = userData.id;
    const teacherName = userData.name;

    if (!teacherId || !teacherName) {
      console.error('Invalid User Data:', userData);
        Swal.fire("Error", "Teacher ID or Name is missing. Please log in again.", "error");
      return;
    }

    console.log('Teacher ID and Name:', teacherId, teacherName);

    const formData = new FormData();
    formData.append('subject', syllabus.subject);
    formData.append('sub_topic', syllabus.subTopic);
    formData.append('date', syllabus.date);
    formData.append('file', file);
    formData.append('class', currentClass);
    formData.append('teacher_id', teacherId);
    formData.append('teacher_name', teacherName);

    const url = editId ? `http://localhost:5000/syllabus/${editId}` : 'http://localhost:5000/syllabus'; // Corrected URL
    const method = editId ? 'put' : 'post';

    axios[method](url, formData)
      .then(() => {
        setShowModal(false);
          Swal.fire("Success", "Syllabus submitted successfully!", "success").then(() => {
            window.location.reload();
          });
      })
      .catch((error) => {
        console.error('Error submitting syllabus:', error);
          Swal.fire("Error", "Failed to submit syllabus.", "error");
      });
  };

  // Handle syllabus deletion
  const handleDelete = (id) => {
    Swal.fire({
      title: 'Are you sure?',
      text: "You won't be able to revert this!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
      if (result.isConfirmed) {
        axios.delete(`http://localhost:5000/syllabus/${id}`) // Corrected URL
          .then(() => {
            Swal.fire(
              'Deleted!',
              'Your syllabus has been deleted.',
              'success'
            ).then(() => {
              window.location.reload();
            });
          })
          .catch(() => {
            Swal.fire('Error!', 'Failed to delete syllabus.', 'error');
          });
      }
    });
  };

  // Open the modal for adding or editing syllabus
  const openModal = (className, item = null) => {
    setCurrentClass(className);
    setSyllabus(item || initialSyllabus);
    setEditId(item ? item.syllabus_id : null);
    setFile(null);
    setShowModal(true);
  };

  const cardStyle = {
    marginBottom: '20px',
    border: 'none',
    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
  };

  const cardHeaderStyle = {
    backgroundColor: '#4b49ac',
    color: '#fff',
    fontSize: '18px',
    fontWeight: 'bold',
  };

  const modalHeaderStyle = {
    backgroundColor: '#4b49ac',
    color: '#fff',
    borderBottom: 'none',
  };

  const buttonStyle = {
    borderRadius: '5px',
  };

  return (
    <div>
      <h2 style={{
          color: "rgb(75, 72, 172)", // Text color
          fontSize: "24px",          // Font size
          fontWeight: "bold",        // Font weight
          textAlign: "center",       // Center alignment
          margin: "40px 0",          // Vertical margin
          fontFamily: "'Arial', sans-serif", // Font family
        }}>
        Syllabus Details
      </h2>
      {classes.map((cls) => (
        <Card key={cls} style={cardStyle}>
          <Card.Header style={cardHeaderStyle}>Class {cls}</Card.Header>
          <Card.Body>
            <ListGroup>
              {(syllabusData[cls] || []).map((item) => (
                <ListGroup.Item
                  key={item.syllabus_id}
                  style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}
                >
                  <div>
                    Subject: {item.subject} | Sub-Topic: {item.sub_topic} | Date: {item.date}{' '}
                    <a href={`http://localhost:5000/uploads/${item.file}`} download>  {/* Corrected URL */}
                      Download File
                    </a>
                  </div>
                  <div>
                    <Button
                      variant="primary"
                      onClick={() => openModal(cls, item)}
                      style={{ ...buttonStyle, marginRight: '10px' }}
                      className='rounded-pill editbtn1'
                    >
                      Edit
                    </Button>
                    <Button variant="danger" onClick={() => handleDelete(item.syllabus_id)} className='rounded-pill canceldel1' style={buttonStyle}>
                      Delete
                    </Button>
                  </div>
                </ListGroup.Item>
              ))}
            </ListGroup>
            <Button
              variant="success"
              onClick={() => openModal(cls)}
              style={{ ...buttonStyle, marginTop: '20px' }}
              className='rounded-pill submitbtn1'
              onClick={() => {
                openModal(cls);
              }}
            >
              Add Syllabus
            </Button>
          </Card.Body>
        </Card>
      ))}

      {/* Modal for adding/editing syllabus */}
      <Modal show={showModal} onHide={() => setShowModal(false)}>
        <Modal.Header closeButton style={modalHeaderStyle}>
          <Modal.Title>{editId ? 'Edit' : 'Add'} Syllabus</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Subject</Form.Label>
              <Form.Control name="subject" value={syllabus.subject} onChange={handleInputChange} />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Sub-Topic</Form.Label>
              <Form.Control name="subTopic" value={syllabus.subTopic} onChange={handleInputChange} />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Date</Form.Label>
              <Form.Control type="date" name="date" value={syllabus.date} onChange={handleInputChange} />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>File</Form.Label>
              <Form.Control type="file" onChange={handleFileChange} />
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="danger" onClick={() => setShowModal(false)} style={buttonStyle}>
            Cancel
          </Button>
          <Button variant="primary" onClick={handleSubmit} style={buttonStyle}>
            Submit
          </Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
};

export default SyllabusDetails;