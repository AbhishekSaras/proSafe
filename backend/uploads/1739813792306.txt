import React, { useState, useEffect } from "react";
import {
  Button,
  Alert,
  Form,
  Container,
  Card,
  Row,
  Col,
  InputGroup,
} from "react-bootstrap";
import axios from "axios";
import "bootstrap/dist/css/bootstrap.min.css";

const StudentPerformance = () => {
  const [classes, setClasses] = useState([]);
  const [students, setStudents] = useState([]);
  const [filteredStudents, setFilteredStudents] = useState([]);
  const [classSelection, setClassSelection] = useState("");
  const [sectionSelection, setSectionSelection] = useState("");
  const [examTypeSelection, setExamTypeSelection] = useState("");
  const [message, setMessage] = useState("");
  const [entries, setEntries] = useState(5);
  const [search, setSearch] = useState("");
  const [currentPage, setCurrentPage] = useState(1);

  useEffect(() => {
    axios
      .get("http://localhost:5000/api/class-section")
      .then((response) => setClasses(response.data))
      .catch((error) => console.error("Error fetching class data:", error));
  }, []);

  const fetchMarksData = () => {
    if (!classSelection || !sectionSelection || !examTypeSelection) {
      setMessage("Please select class, section, and exam type.");
      return;
    }
    const storedUser  = localStorage.getItem("userData");
    const teacher = storedUser  ? JSON.parse(storedUser ) : null;

    if (!teacher) {
      console.error("Teacher not logged in");
      return;
    }

    const { id: teacherId, name: teacherName } = teacher;

    axios
      .get("http://localhost:5000/api/marks", {
        params: {
          class_name: classSelection,
          section: sectionSelection,
          exam_type: examTypeSelection,
          teacher_id: teacherId,
          teacher_name: teacherName,
        },
      })
      .then((response) => {
        setStudents(response.data);
        setFilteredStudents(response.data);
      })
      .catch((error) => console.error("Error fetching marks data:", error));
  };

  const handleSearch = (event) => {
    const value = event.target.value.toLowerCase();
    setSearch(value);
    setFilteredStudents(
      students.filter(
        (student) =>
          student.student_name.toLowerCase().includes(value) ||
          student.subject.toLowerCase().includes(value)
      )
    );
    setCurrentPage(1);
  };

  const handleEntriesChange = (event) => {
    setEntries(parseInt(event.target.value, 10));
    setCurrentPage(1);
  };

  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  const totalPages = Math.ceil(filteredStudents.length / entries);
  const startIndex = (currentPage - 1) * entries;
  const paginatedStudents = filteredStudents.slice(startIndex, startIndex + entries);

  // Create a unique list of classes
  const uniqueClasses = [...new Set(classes.map(item => item.class_name))];

  return (
    <Container>
      <h2 className="text-center mt-4"
      style={{
        color: "rgb(75, 72, 172)", // Text color
        fontSize: "24px",          // Font size
        fontWeight: "bold",        // Font weight
        textAlign: "center",       // Center alignment
        margin: "40px 0",          // Vertical margin
        fontFamily: "'Arial', sans-serif", // Font family
      }}
      >Student Performance Overview</h2>

      {message && <Alert variant="warning">{message}</Alert>}

      <Card className="mb-3">
        <Card.Body>
          <Row>
            <Col md={4}>
              <Form.Group controlId="classSelection" style={{ width: "200px" }}>
                <Form.Label>Select Class:</Form.Label>
                <Form.Control
                  as="select"
                  value={classSelection}
                  onChange={(e) => setClassSelection(e.target.value)}
                >
                  <option value="">Select Class</option>
                                    {uniqueClasses.map((className, index) => (
                    <option key={index} value={className}>
                      {className}
                    </option>
                  ))}
                </Form.Control>
              </Form.Group>
            </Col>
            <Col md={4}>
              <Form.Group controlId="sectionSelection" style={{ width: "200px" }}>
                <Form.Label>Select Section:</Form.Label>
                <Form.Control
                  as="select"
                  value={sectionSelection}
                  onChange={(e) => setSectionSelection(e.target.value)}
                >
                  <option value="">Select Section</option>
                  {[...new Set(
                    classes
                      .filter((item) => item.class_name === classSelection)
                      .map((item) => item.section)
                  )].map((section, index) => (
                    <option key={index} value={section}>
                      {section}
                    </option>
                  ))}
                </Form.Control>
              </Form.Group>
            </Col>
            <Col md={4}>
              <Form.Group controlId="examTypeSelection" style={{ width: "200px" }}>
                <Form.Label>Select Exam Type:</Form.Label>
                <Form.Control
                  as="select"
                  value={examTypeSelection}
                  onChange={(e) => setExamTypeSelection(e.target.value)}
                >
                  <option value="">Select Exam Type</option>
                  <option value="Monthly">Monthly</option>
                  <option value="Midterm">Midterm</option>
                  <option value="Annually">Annually</option>
                </Form.Control>
              </Form.Group>
            </Col>
          </Row>
          <div className="d-flex justify-content-center">
            <Button
              variant="primary"
              onClick={fetchMarksData}
              className="mt-3 rounded-pill"
            >
              Fetch Data
            </Button>
          </div>
        </Card.Body>
      </Card>

      {students.length > 0 && (
        <div
          id="order-listing_wrapper"
          className="dataTables_wrapper dt-bootstrap5 no-footer"
          style={{
            overflowY: 'auto',
            maxHeight: '400px',
            backgroundColor: 'white',
            borderRadius: '15px',
            padding: '20px',
            boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
          }}
        >
          <Row className="mb-3">
            <Col md={2}>
              <Form.Group controlId="entriesSelection">
                <Form.Label>Show Entries:</Form.Label>
                <Form.Control
                  as="select"
                  value={entries}
                  onChange={handleEntriesChange}
                >
                  <option value="5">5</option>
                  <option value="10">10</option>
                  <option value="25">25</option>
                  <option value="50">50</option>
                </Form.Control>
              </Form.Group>
            </Col>
            <Col md={4} className="ms-auto">
              <InputGroup className="w-100">
                <Form.Control
                  type="text"
                  placeholder="Search by name or subject"
                  value={search}
                  onChange={handleSearch}
                />
              </InputGroup>
            </Col>
          </Row>

          <div style={{ overflowY: "auto", maxHeight: "500px" }}>
            <table
              id="order-listing"
              className="table dataTable no-footer"
              aria-describedby="order-listing_info"
              style={{ backgroundColor: 'white', borderRadius: '15px', overflow: 'hidden' }}
            >
              <thead>
                <tr>
                  <th>Student ID</th>
                  <th>Name</th>
                  <th>Subject</th>
                  <th>Marks</th>
                </tr>
              </thead>
              <tbody>
                {paginatedStudents.map((student) => (
                  <tr key={student.student_id}>
                    <td>{student.student_id}</td>
                    <td>{student.student_name}</td>
                    <td>{student.subject}</td>
                    <td>{student.marks}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          <Row className="mt-3">
            <Col md={6}>
              Showing {startIndex + 1} to {Math.min(startIndex + entries, filteredStudents.length)} of {filteredStudents.length} entries
            </Col>
            <Col md={6} className="d-flex justify-content-end">
              <div className="d-flex align-items-center">
                               <div className="btn-group" style={{ borderRadius: '5px', overflow: 'hidden' }}>
                  <button
                    className={`btn btn-secondary ${currentPage === 1 ? "disabled" : ""}`}
                    onClick={() => setCurrentPage(currentPage - 1)}
                    disabled={currentPage === 1}
                  >
                    Previous
                  </button>
                  <span className="btn btn-secondary" style={{ backgroundColor: '#4B48AC', color: 'white', pointerEvents: 'none' }}>
                    {currentPage}
                  </span>
                  <button
                    className={`btn btn-secondary ${currentPage === totalPages ? "disabled" : ""}`}
                    onClick={() => setCurrentPage(currentPage + 1)}
                    disabled={currentPage === totalPages}
                  >
                    Next
                  </button>
                </div>
              </div>
            </Col>
          </Row>
        </div>
      )}
    </Container>
  );
};

export default StudentPerformance;